version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Mount the SQL script
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"  # RabbitMQ Management UI
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  user-app:
    build:
      context: ./user  # Path to the user service directory
    environment:
      PORT: 8000
      DATABASE_URL: postgresql://postgres:pass@db:5432/mydatabase
      NODE_ENV: dev
      JWT_SECRET: U~A^O8vk510OZswgrvwwr4$%@&*(@)/*frwrgvwrs24422342
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      EXCHANGE_NAME: user
    volumes:
      - ./user:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: >
      npm start  # Start the user service

  course-app:
    build:
      context: ./course  # Path to the course service directory
    environment:
      PORT: 8001
      DATABASE_URL: postgresql://postgres:pass@db:5432/mydatabase
      NODE_ENV: dev
      JWT_SECRET: U~A^O8vk510OZswgrvwwr4$%@&*(@)/*frwrgvwrs24422342
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      QUEUE_NAME: course
    volumes:
      - ./course:/app
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: >
      npm start  # Start the course service

volumes:
  postgres_data:
